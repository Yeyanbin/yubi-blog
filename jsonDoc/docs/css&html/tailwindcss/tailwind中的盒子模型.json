{"fileName":"tailwind中的盒子模型.md","dirList":["docs","css&html","tailwindcss"],"name":"tailwind中的盒子模型","createTime":1679762830705.9468,"modifyTime":1679768825161.4778,"data":"\n\n所有命名规则都遵循类似前缀 + 属性 + 修饰器的命名方式\n\n## 盒子模型\n\n> 盒子模型是 CSS 中一个非常重要的概念，它决定了我们如何布局和样式 HTML 元素。\n\n在盒子模型中，每个HTML元素都被看做一个矩形的盒子，这个盒子由4个不同的区域组成：\n- Content Box（内容框）：元素的内容区域，通常由文本、图片等组成。\n- Padding Box（内边距框）：内容框周围的内边距，内边距与内容框之间的区域称为内边距区域。\n- Border Box（边框框）：内边距区域周围的边框，边框与内边距区域之间的区域称为边框区域。\n- Margin Box（外边距框）：边框区域外部的空白区域，是元素与其它元素的距离。\n\n### 在tailwind中使用盒子模型\n\n在 Tailwind CSS 中，盒子模型有着非常清晰的处理方式。Tailwind CSS 中的所有尺寸都是针对盒子的内容框（Content Box）计算的。具体来说，Tailwind CSS 中的尺寸都被解释为：\n\n```js\nwidth = content width + padding + border + margin\nheight = content height + padding + border + margin\n```\n\n盒子模型相关的类型，主要有以下几种类型\n\n- 内容框（Content Box）的长度（Length）和高度（height）\n- 外边距（Margin），内边距（padding）和边框（border）\n\n#### 长度和高度\n类名| 介绍  \n---|---\nw-[size] | 设置元素的宽度为 [size]，其中 [size] 可以是数字、百分比值或指定的尺寸缩写，如 w-1/2、w-32、 w-96px 等。\nh-[size] | 设置元素的高度为 [size]，使用方式与 w-[size] 相同。\nmin-w-[size] / min-h-[size]|设置元素的最小宽度 / 高度，使用方式与 w-[size] / h-[size] 相同。\nmax-w-[size] / max-h-[size]|设置元素的最大宽度 / 高度，使用方式与 w-[size] / h-[size] 相同。\nh-screen / w-screen|设置元素的宽度或高度为屏幕的高度或宽度。\nw-auto / h-auto | 自动宽度\nw-full / h-full | 最大宽度\n\n#### 边距和边框\n\n使用 Tailwind CSS 的盒子模型时应该注意：\n\n每个类都应该只设置一个方向的边距（即，margin-top、margin-right、margin-bottom、margin-left 只应该在一个类中使用，不应该同时出现在同一个类中）。\n\n类型|介绍\n---|---\nm-[size],p-[size]| 设置元素的外（内）边距大小\nmx-[size],px-[size]|设置元素的水平方向的外（内）边距大小\nmy-[size],py-[size]|设置元素的水平方向的外（内）边距大小\nmt-[size],pt-[size]|设置元素的top方向的外（内）边距大小，同理 mr-[size],mb-[size],ml-[size]\nborder-[size]|为元素添加指定大小的边框\nborder-solid / border-dotted / border-dashed|设置元素的边框样式，分别为实线、点线、虚线。\nborder-[color]|设置元素的边框颜色，[color] 可以是 CSS 预定义的颜色名称、十六进制颜色值或 RGB 颜色值，如 border-red-500。\nborder-opacity-[opacity]|设置边框的不透明度，[opacity] 可以是数字（0 到 100）或 0 到 1 之间的小数，如 border-opacity-50。\nshadow-sm / shadow-md / shadow-lg / shadow-xl|设置元素的盒子阴影大小和模糊程度，分别为 1px、3px、5px、7px 。\nshadow-[color]|设置元素的盒子阴影颜色，[color] 规则同边框颜色命名规则。\n\n### container盒子容器\n\n> .container：盒子容器，用于限制布局的最大宽度。容器是居中的，左右各有一些空白。\n\ncontainer盒子容器是一个非常方便的容器，能够帮助我们限制内容的宽度并实现自适应布局。我们可以修改配置文件对这个盒子容器进行定制\n\n- container.padding： 容器的内边距，一般用来设置内容和容器之间的距离。默认值为 1rem。\n- container.center： 内容和容器是否居中，默认值为 true，表示内容和容器都居中。如果值为 false，则内容和容器位于容器的左侧。\n- container.maxWidths： 最大宽度，用于设置容器的最大宽度。默认值为一个带单位的 CSS 值，为 100%。\n- container.gutters： 容器的边距，用于控制内容和两侧边距之间的距离。默认值为一个由对象组成的数组，包括两个属性，分别为'default': '1rem' 和 'sm': '2rem'，这表示在默认情况下，容器的左右边距为 1rem，然后在大屏幕下会使用 2rem 边距。\n- container.screens：   用来为容器类指定响应式断点，以便在不同尺寸的屏幕上，容器的宽度有所不同。\n\n```js\n// tailwind.config.js\nmodule.exports = {\n  theme: {\n    container: {\n      center: true, // 是否居中\n      padding: '1rem',\n      maxWidths: {\n        sm: '640px',\n        md: '768px',\n        lg: '1024px',\n        xl: '1280px',\n      },\n      // 分别为 md 和 lg 容器类定义了定制它们容器的相关配置\n      screens: {\n        'md': '768px',\n        'lg': '1024px',\n      },\n    },\n  },\n}\n```\n"}