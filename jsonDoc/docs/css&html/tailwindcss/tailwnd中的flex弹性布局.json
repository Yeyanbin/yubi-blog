{"fileName":"tailwnd中的flex弹性布局.md","dirList":["docs","css&html","tailwindcss"],"name":"tailwnd中的flex弹性布局","createTime":1679821011655.1487,"modifyTime":1679851864738.8538,"data":"\n\nflex：将一个容器元素设置为弹性容器\n\n\n类|作用\n---|---\nflex-row 和 flex-col|flex-row 将子元素水平排列，flex-col 将子元素垂直排列。一般情况下，flex-row 和 flex-col 都会和 flex 一起使用\nflex-wrap|指定当前行排不下时，是否启动换行，常用值包括 flex-wrap（正常换行）、flex-no-wrap（不换行，压缩子元素）和 flex-wrap-reverse（逆向排列换行）。\nflex-1|将一个元素的宽度或者高度（取决于是 row 还是 col）设为剩余空间的 1%，这样它就可以占据剩余的空间。它主要用来为剩余的子元素分配剩余的空间，\njustify-start、justify-end、justify-center、justify-between 和 justify-around|水平对齐方式，分别表示左对齐、右对齐、居中、两端对齐和围绕中心对齐。\nitems-start、items-end、items-center、items-baseline 和 items-stretch|垂直对齐方式，分别表示顶部对齐、底部对齐、居中对齐、对齐基线对齐和拉伸对齐。\nspace-x-[n] 和 space-y-[n]|控制子元素在排列方向的间距，分别表示水平间距和垂直间距。\nflex-grow|该属性用于在弹性容器中分配剩余空间。默认情况下，弹性子元素会根据它们的宽度自动调整它们之间的间距。如果指定了 flex-grow 属性，它就会根据剩余空间为指定的元素分配额外的宽度。数值越大，分配到的宽度就越多。在 Tailwind CSS 中，我们可以使用 flex-grow-[n] 类名来为指定的弹性子元素设置 flex-grow 属性，其中 [n] 表示分配到的宽度比例，可以为任意数字。\nflex-shrink|该属性用于定义弹性元素在空间根据其 flex 值收缩时的权重，也就是设置弹性元素的收缩比例。默认情况下，弹性子元素是以它们的本来宽度作为参考重新调整它们的宽度。通过指定 flex-shrink 属性，我们可以指定在空间收缩时要缩小哪个元素的尺寸，数值越大缩小的也就越多。在 Tailwind CSS 中，我们可以使用 flex-shrink-[n] 类名来为指定的弹性子元素设置 flex-shrink 属性，表示元素的收缩比例，其中 [n] 表示设置的收缩比例，可以为任意数字或小数，例如：\n\n\n### 例子\n\n```html\n<div class=\"flex\">\n  <!-- 子元素 -->\n</div>\n\n<!-- flex-row 将子元素水平排列。 -->\n<!-- 一般情况下，flex-row 和 flex-col 都会和 flex 一起使用。 -->\n<div class=\"flex flex-row\">\n  <!-- 水平排列的子元素 -->\n</div>\n\n<!-- flex-col 将子元素垂直排列 -->\n<div class=\"flex flex-col\">\n  <!-- 垂直排列的子元素 -->\n</div>\n\n<!-- flex-wrap：指定当前行排不下时，是否启动换行 -->\n<!--  flex-wrap（正常换行）、flex-no-wrap（不换行，压缩子元素）和 flex-wrap-reverse（逆向排列换行） -->\n<div class=\"flex flex-wrap\">\n  <!-- 可能换行的子元素 -->\n</div>\n\n<!-- 将一个元素的宽度或者高度（取决于是 row 还是 col）设为剩余空间的 1%，这样它就可以占据剩余的空间。 -->\n<div class=\"flex\">\n  <div class=\"flex-1\"></div>\n  <div class=\"flex-1\"></div>\n</div>\n```\n\n<div class=\"tailwindShow divBorder\">  \n  <p>flex-row Demo</p>\n  <div class=\"flex flex-row\">\n    <div>水平排列的子元素</div>\n    <div>水平排列的子元素</div>\n    <div>水平排列的子元素</div>\n    <div>水平排列的子元素</div>\n    <div>水平排列的子元素</div>\n    <div>水平排列的子元素</div>\n    <div>水平排列的子元素</div>\n    <div>水平排列的子元素</div>\n    <div>水平排列的子元素</div>\n    <div>水平排列的子元素</div>\n  </div>\n\n  <p>flex-col Demo</p>\n  <!-- flex-col 将子元素垂直排列 -->\n  <div class=\"flex flex-col\">\n    <!-- 垂直排列的子元素 -->\n    <div>垂直排列的子元素</div>\n    <div>垂直排列的子元素</div>\n    <div>垂直排列的子元素</div>\n    <div>垂直排列的子元素</div>\n  </div>\n\n  <p>flex-wrap Demo</p>\n\n  <div class=\"flex flex-wrap\">\n    <div>可能换行的子元素</div>\n    <div>可能换行的子元素</div>\n    <div>可能换行的子元素</div>\n    <div>可能换行的子元素</div>\n    <div>可能换行的子元素</div>\n    <div>可能换行的子元素</div>\n    <div>可能换行的子元素</div>\n    <div>可能换行的子元素</div>\n    <div>可能换行的子元素</div>\n    <div>可能换行的子元素</div>\n    <div>可能换行的子元素</div>\n    <div>可能换行的子元素</div>\n  </div>\n\n  <div class=\"flex\">\n    <div class=\"flex-1\">flex-1</div>\n    <div class=\"flex-1\">flex-1</div>\n    <div class=\"flex-1\">flex-1</div>\n    <div class=\"flex-0\">flex-0</div>\n  </div>\n</div>\n\n```html\n\n\n<!-- justify-start、justify-end、justify-center、justify-between 和 justify-around：水平对齐方式，分别表示左对齐、右对齐、居中、两端对齐和围绕中心对齐。 -->\n<div class=\"flex justify-start\">从左开始排列的子元素</div>\n<div class=\"flex justify-end\">从右开始排列的子元素</div>\n<div class=\"flex justify-center\">居中排列的子元素</div>\n<div class=\"flex justify-between\">两端对齐的子元素</div>\n<div class=\"flex justify-around\">围绕中心对齐的子元素</div>\n\n\n<!-- items-start、items-end、items-center、items-baseline 和 items-stretch：垂直对齐方式，分别表示顶部对齐、底部对齐、居中对齐、对齐基线对齐和拉伸对齐。 -->\n<div class=\"flex items-start\">顶部对齐的子元素</div>\n<div class=\"flex items-end\">底部对齐的子元素</div>\n<div class=\"flex items-center\">居中对齐的子元素</div>\n<div class=\"flex items-baseline\">基线对齐的子元素</div>\n<div class=\"flex items-stretch\">拉伸对齐的子元素</div>\n\n\n<!-- space-x-[n] 和 space-y-[n]：控制子元素在排列方向的间距，分别表示水平间距和垂直间距。 -->\n<div class=\"flex space-x-4\">\n  <!-- 水平方向上，子元素之间都有 4 像素的间距 -->\n</div>\n\n<div class=\"flex flex-col space-y-4\">\n  <!-- 垂直方向上，子元素之间都有 4 像素的间距 -->\n</div>\n\n\n<!-- 我们为 3 个弹性子元素分配了不同的 flex-grow 属性，分别为 0、1 和 2，其中属性值为 0 的元素不分配剩余宽度，属性值为 1 的元素分配剩余宽度的一半，属性值为 2 的元素分配剩余宽度的 2/3。 -->\n<div class=\"flex\">\n  <div class=\"flex-grow-0\">1</div>\n  <div class=\"flex-grow-1\">2</div>\n  <div class=\"flex-grow-2\">3</div>\n</div>\n\n<!-- 我们为 3 个弹性子元素分配了不同的 flex-shrink 属性，分别为 0、2 和 1，其中属性值为 0 的元素是不会被收缩的，属性值为 2 的元素在收缩时会缩小的更多，属性值为 1 的元素则会在收缩时缩小一些。 -->\n<div class=\"flex\">\n  <div class=\"flex-shrink-0\">1</div>\n  <div class=\"flex-shrink-2\">2</div>\n  <div class=\"flex-shrink-1\">3</div>\n</div>\n\n```"}