{"fileName":"3.浏览器是如何执行JS.md","dirList":["docs","css&html"],"name":"3.浏览器是如何执行JS","createTime":1679414070451.6816,"modifyTime":1679414071219.4983,"data":"\n- 编译器和解释器\n  - 之所以存在编译器，是因为机器并不能直接理解我们所写的代码，所以在执行程序之前，需要将我们的代码翻译成机器能理解的机器语言。\n\n> 编译型语言：在程序执行之前，需要经过编译器的编译过程，并且编译之后会直接保留机器能读懂的二进制文件，这样每次运行程序时都可以直接运行该二进制文件。\n>\n> 解释型语言：在每次运行时都需要通过解释器对程序进行动态解释和执行。例如Python，JavaScript属于解释型语言。\n\n##### 流程\n\n1. 编译器\n\n源代码 `-词法分析和语法分析->` AST `-词义分析->` 中间代码 `-代码优化->`  二进制文件 `-直接执行->` 执行\n\n2. 解释器\n\n源代码 `-词法分析和语法分析->` AST `-词义分析->` 字节码 `-解释执行->` 执行\n \n#### V8执行代码流程\n\n![](https://cdn.nlark.com/yuque/0/2020/png/305942/1594974392146-775bfa1d-9ae6-4bb0-8c0d-e148c249943a.png)\n\n1. 通过词法分析，语法分析生成抽象语法树 AST和执行上下文\n    - 第一阶段是分词（词法分析），作用是将一行行源码拆解成一个个 token。所谓token是指语法上不可再分的最小的单个字符或字符串\n    - 第二阶段是解析（语法分析），作用是将上一步生成的token数据，根据语法规则转为AST，如果源码符合语法规则，这一步就会顺利完成，否则会抛出错误。\n2. 根据AST生成字节码\n3. 执行代码"}