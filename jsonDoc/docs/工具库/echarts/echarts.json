{"fileName":"echarts.md","dirList":["docs","工具库","echarts"],"name":"echarts","createTime":1679414070455.9016,"modifyTime":1679414071257.0776,"data":"## echarts的使用\n\n模仿了vuex的action使用，编写了`mapChart`方法\n\n- mapChart可挂载于methods中，类似于mapAction\n  - 类型如下\n- 在每次更新的时候会销毁上次使用的chart，否则某些情况下再次加载会留下上次线条的痕迹。\n- 支持使用事件 echart文档 <https://echarts.apache.org/zh/api.html#echartsInstance.on>\n\n```ts\n\ntype TMapChart = (IChartMap: IChartMap) => {\n  [updateFuncName: string]: (data: any) => void\n};\n\ninterface IChartMap {\n  [updateFuncName: string]: IChartItem;\n}\n\ninterface IChartItem {\n  id: string;\n  getOption: (data: any) => void;\n  event?: IEvent;\n}\n\ninterface IEvent {\n  name: String;\n  handler: (event: any) => void;\n}\n\nconst mapChart: TMapChart;\n```\n\n使用例子\n\n```js\n// 使用 overviewMonitor/index.vue\nexport default {\n  //...\n  mounted() {\n    // 只需要类似这样去更新数据即可\n    getXXX().then(res => overviewUpdate(res.list)); \n    // overviewUpdate(res.list) 实际上差不多等于\n    // echarts.init(document.getElementById('overviewChart')).setOption(getOverviewOption(res.list));\n  }\n  methods: {\n    ...mapChart({\n      overviewUpdate: {\n        id: 'overviewChart',\n        getOption: getOverviewOption,\n        event: overviewEvent,\n      },\n    }),\n  }\n}\n\n/*\n  getOverviewOption和overviewEvent在./config.js中配置\n*/\n// ./createEcharts.js\nexport const mapChart = function (chartMap) {\n  Object.keys(chartMap).forEach((funcName) => {\n    const { id, getOption, event } = chartMap[funcName];\n\n    chartMap[funcName] = (data) => {\n      // 创建之前销毁，否则某些情况下再次加载会留下上次线条的痕迹。\n      echarts.init(document.getElementById(id)).dispose();\n      const chart = echarts.init(document.getElementById(id));\n      event && chart.on(event.name, event.handler, { chart });\n      chart.setOption(getOption(data));\n    };\n  });\n  return chartMap;\n};\n```\n"}