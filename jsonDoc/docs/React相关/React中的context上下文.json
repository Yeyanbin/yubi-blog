{"fileName":"React中的context上下文.md","dirList":["docs","React相关"],"name":"React中的context上下文","createTime":1681840976419.4822,"modifyTime":1681842186387.9983,"data":"\n# 文章介绍\n\n本文主要是探索React.createContext这个API的用法，并且结合实际开发中遇到的问题，整理出一些使用经验，并且层层递进地展示。\n\n## React.createContext\n\nReact.createContext 允许你创建一个上下文，组件可以提供或读取这个上下文。它的作用是在组件树中传递数据，而不必在每一层都手动传递 props，组件可以提供或读取这个上下文。\n\n下面是一个简单的例子：\n\n\n```js\nimport { createContext } from 'react';\n\nconst ThemeContext = createContext('light');\n\nfunction App() {\n  const [theme, setTheme] = useState('light');\n  // ...\n  return (\n    <ThemeContext.Provider value={theme}>\n      <Page />\n    </ThemeContext.Provider>\n  );\n}\n\n\nfunction Page() {\n  const theme = useContext(ThemeContext);\n  // ...\n}\n```\n在这个例子中，我们创建了一个名为 ThemeContext 的上下文，并使用 `createContext` 函数初始化为 `'light'`。然后，在 `App` 组件中，我们使用 `ThemeContext.Provider` 来提供上下文值。然后 `Page` 组件中使用 `useContext(ThemeContext)` 来读取上下文值。\n\n\n## useContext\n\nuseContext是React Hook提供的API，当你使用 Provider 组件来提供上下文值时，React 会自动更新所有使用 useContext 或 Consumer 组件读取上下文值的组件。所以我们并不需要担心响应式问题。\n\n## 使用多个上下文\n\n你可以在一个应用程序中创建和使用多个不同的上下文。每个上下文都是独立的，并且可以用来传递不同类型的数据。\n\n例如，你可以创建一个 `ThemeContext` 来传递主题相关的数据，同时创建一个 `UserContext` 来传递用户相关的数据。这两个上下文是独立的，并且可以在组件树中同时使用。\n\n```js\nimport { createContext, useContext } from 'react';\n\nconst ThemeContext = createContext('light');\nconst UserContext = createContext({ name: 'Guest' });\n\nfunction App() {\n  const [theme, setTheme] = useState('light');\n  const [user, setUser] = useState({ name: 'Guest' });\n  // ...\n  return (\n    <ThemeContext.Provider value={theme}>\n      <UserContext.Provider value={user}>\n        <Page />\n      </UserContext.Provider>\n    </ThemeContext.Provider>\n  );\n}\n\nfunction Page() {\n  const theme = useContext(ThemeContext);\n  const user = useContext(UserContext);\n  // ...\n}\n```\n\n在这个例子中，我们创建了两个不同的上下文：`ThemeContext` 和 `UserContext`。然后，在 App 组件中，我们使用两个嵌套的 `Provider` 组件来分别提供这两个上下文的值。最后，在 `Page` 组件中，我们使用两次 `useContext` 钩子函数来分别读取这两个上下文的值。\n\n> 注意：使用相同的 `Provider` 组件时，最内层的 `Provider` 组件会覆盖外层 `Provider` 组件提供的上下文值。\n\n\n## 上下文过多的导致嵌套层级过深问题。\n\n当你需要在组件树中嵌套多个 `Provider` 组件时，可能会导致代码不够优雅。一种解决方案是创建一个自定义的 `Provider` 组件，它可以同时提供多个上下文值。\n\n例如，你可以创建一个 `AppContext` 组件，它接受多个上下文值作为 props，并使用多个嵌套的 `Provider` 组件来提供这些值：\n\n```js\nimport { createContext } from 'react';\n\nconst ThemeContext = createContext('light');\nconst UserContext = createContext({ name: 'Guest' });\n\nfunction AppContext({ children, theme, user }) {\n  return (\n    <ThemeContext.Provider value={theme}>\n      <UserContext.Provider value={user}>{children}</UserContext.Provider>\n    </ThemeContext.Provider>\n  );\n}\n\nfunction App() {\n  const [theme, setTheme] = useState('light');\n  const [user, setUser] = useState({ name: 'Guest' });\n  // ...\n  return (\n    <AppContext theme={theme} user={user}>\n      <Page />\n    </AppContext>\n  );\n}\n\n```\n\n在这个例子中，我们创建了一个 `AppContext` 组件，它接受 `theme` 和 `user` 两个 `props` ，并使用两个嵌套的 `Provider` 组件来分别提供这两个上下文的值。这样，我们就可以在 `App` 组件中使用一个单独的 `AppContext` 组件来替代多个嵌套的 `Provider` 组件。\n\n这是一个使用React context上下文的小技巧，可以称之为 **上下文组合**。\n\n## 更完善的上下文组合技巧\n\n我们可以一个 `useAppContext` 钩子函数来配合 `AppContext` 使用，它分别提供和读取这两个上下文的值：\n\n```js\n\nimport { createContext, useContext } from 'react';\n\nconst UserContext = createContext({ name: 'Guest' });\nconst AuthContext = createContext({ isAuthenticated: false });\n\nfunction AppContext({ children, user, auth }) {\n  return (\n    <UserContext.Provider value={user}>\n      <AuthContext.Provider value={auth}>{children}</AuthContext.Provider>\n    </UserContext.Provider>\n  );\n}\n\nfunction useAppContext() {\n  const user = useContext(UserContext);\n  const auth = useContext(AuthContext);\n  return { user, auth };\n}\n\nfunction App() {\n  const [user, setUser] = useState({ name: 'Guest' });\n  const [auth, setAuth] = useState({ isAuthenticated: false });\n  // ...\n  return (\n    <AppContext user={user} setUser={setUser} auth={auth} setAuth={setAuth}>\n      <Page />\n    </AppContext>\n  );\n}\n\nfunction Page() {\n  const { user, auth } = useAppContext();\n  // ...\n}\n```\n\n在这个例子中，我们创建了一个 `AppContext` 组件和一个 `useAppContext` 钩子函数。 `AppContext` 组件接受 `user` 和 `auth` 两个 `props` ，并使用两个嵌套的 `Provider` 组件来分别提供这两个上下文的值。 `useAppContext` 钩子函数则使用两次 `useContext` 钩子函数来分别读取这两个上下文的值。\n\n"}