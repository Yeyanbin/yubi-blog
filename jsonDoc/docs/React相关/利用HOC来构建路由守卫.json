{"fileName":"利用HOC来构建路由守卫.md","dirList":["docs","React相关"],"name":"利用HOC来构建路由守卫","createTime":1682149915002.6638,"modifyTime":1682155780506.5518,"data":"\n# 介绍\n\nHOC高阶组件是一个函数，它接受一个组件作为参数，并返回一个新的组件。可以使用高阶组件来封装路由守卫的逻辑，然后将其应用于需要路由守卫的页面。\n\n## 简单的路由守卫例子\n\n```js\n\nimport { useRouter } from 'next/router';\n\nfunction withAuth(Component) {\n  return function WithAuth(props) {\n    const router = useRouter();\n    const isLoggedIn = checkIfLoggedIn(); // 检查用户是否登录的逻辑\n\n    if (!isLoggedIn) {\n      router.push('/login');\n      return null;\n    }\n\n    return <Component {...props} />;\n  };\n}\n\nexport default withAuth;\n```\n\n在上面的例子中，我们定义了一个名为withAuth的高阶组件。这个高阶组件接受一个组件作为参数，并返回一个新的组件。在新组件中，我们使用useRouter钩子来获取Next.js的路由器对象。然后，我们检查用户是否登录。如果用户未登录，我们使用router.push方法将用户重定向到登录页面。否则，我们渲染传入的组件。\n\n```js\n\nimport withAuth from '../path/to/withAuth';\n\nfunction ProtectedPage() {\n  return <div>Protected content</div>;\n}\n\nexport default withAuth(ProtectedPage);\n\n```\n\n在上面的例子中，我们将withAuth高阶组件应用于ProtectedPage页面。这样，当用户访问这个页面时，如果用户未登录，他们将被重定向到登录页面。\n\n\n## 完整版本\n\n```js\n\nimport { useRouter } from 'next/router';\n\nfunction withGroup(Component, preMount) {\n  return function WithAuth(props) {\n    const router = useRouter();\n    const { user } = useAppContext(); // 检查用户是否登录的逻辑\n\n    if (!user) {\n      router.push('/login');\n      return null;\n    }\n    preMount();\n\n    return withLoading(<Component {...props} />);\n  };\n}\n\nexport default withGroup;\n\n```\n\n\n```js\n\nfunction preMount() {\n  const { update } = useXxxDataContext();\n  update();\n}\n\nfunction Page() {\n  const { data } = useXxxDataContext();\n  const { user } = useAppContext();\n  // ...\n}\n\nexport default withGroup(Page, preMount);\n\n\n```"}