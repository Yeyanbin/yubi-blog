{"fileName":"Schema构造.md","dirList":["docs","JavaScirpt","配置化&低代码"],"name":"Schema构造","createTime":1679414070442.6848,"modifyTime":1679414071059.7573,"data":"\n# Schema属性处理提案\n\n## 设想\n\n提供较为全面的对属性处理的能力，并依据已知的痛点进行优化。\n\n以本鶸比较熟悉的配置化表单为着力点，对齐前后台痛点，赋能产品同学，为其提供表单的操作能力，自己动手快速响应完善业务逻辑，解放前端人力。\n（编不下去了，大概是这个意思。）\n\n- 例如拖拽式表单项，可视化配置。\n  - 每一个表单具有唯一的key值\n  - 前端可通过表单key获取具体的表单配置json\n\n### content内容\n\n```json\n[\n  {\n    \"component\": \"input\",\n    \"label\": {\n      \"expression\": \"{type}\",\n      \"map\": \"{TITLE_TYPE_MAP}\",\n      \"value\": \"操作备注\",\n      \"type\": \"string\"\n    },\n    \"prop\": \"remark\"\n  },\n  {\n    \"component\": \"select\",\n    \"label\": \"选项\",\n    \"prop\": \"type\",\n    \"options\": {\n      \"type\": \"array\",\n      \"expression\": \"{typeOptions}\",\n      \"for\": [\n        { \"key\": \"label\", \"value\": \"name\", \"default\": \"选项的默认值\" },\n        { \"key\": \"value\", \"value\": \"id\", \"default\": \"0\", \"type\": \"number\" },\n      ]\n    }\n  }\n]\n```\n\n### state状态池\n\n```json\n\n{\n  \"DEFAULT_TITLE\": \"操作备注\",\n  \"TITLE_TYPE_MAP\": {\n    \"1\": \"新增备注\",\n    \"2\": \"删除备注\",\n    \"3\": \"查找备注\",\n    \"4\": \"修改备注\",\n  },\n  \"typeOptions\": [\n    { \"id\": 1, \"name\": \"新增备注\" },\n    { \"id\": 2, \"name\": \"删除备注\" },\n    { \"id\": 3, \"name\": \"查找备注\" },\n    { \"id\": 4, \"name\": \"修改备注\" }\n  ]\n}\n```\n\n## 用一个对象来表示值\n\n### 类型的处理 type\n\n#### 遇到的问题\n\n> 用户在input输入的时候，只能是字符串，例如 true, false\n\n之前在研究json化的时候发现了一个问题，我们是很难确定一个值是什么类型的，因此在具体业务中，我们常常\n需要做类型转换，这将花费大量的时间成本。（例如与后台同学做联调）\n\n例如，size的类型是number，而id的类型是string。我们并不能将所有可以转化为number类型的string都做转换，所以，上述的设计也可以解决此问题。\n\n```json\n{\n  \"size\": \"120\",\n  \"id\": \"1\",\n}\n```\n\n#### 解决例子\n\n```json\n{\n  \"size\": {\n    \"value\": \"120\",\n    \"type\": \"number\"\n  },\n  \"id\": \"1\",\n  \"is_comfirm\": {\n    \"value\": \"true\",\n    \"type\": \"boolean\"\n  }\n}\n```\n\n#### 注意事项\n\n默认的类型应该是字符串，也就是下面三个`name`是等价的\n\n```json\n{\n  \"name\": \"张三\"\n}\n\n{\n  \"name\": {\n    \"value\": \"张三\",\n    \"type\": \"string\"\n  }\n}\n\n{\n  \"name\": {\n    \"value\": \"张三\",\n  }\n}\n```\n\n### 值对象和表达式的引入\n\n为了获得更完善的自定义能力，使用表达式是必须的，具体的表达式原理可以阅读隔壁的逆波兰表达式文章，这里不展开描述了，反正原理是逆波兰表达式的使用。\n\n#### 对于任意值都可以使用值对象来处理\n\n  1. 发现一个值, 判断是否字符串, 是则直接赋值\n  2. 否则 ，查看是否带有`value`或者`expression`属性，是则认为这个字段当成特殊的对象值做处理\n  3. 否则，当普通对象处理。\n\n#### 对于一个值对象可能有的属性\n\n- `value`：默认值\n- `expression`：表达式，和`value`二选一，同时存在的时候优先级比`value`高\n- `type`：类型，默认为 `string`\n- `for`：数组的处理方案\n- `map`：映射方案，会把值映射展示，仅供展示。\n\n#### 数组的处理方案\n\n当type的值为`array`的时候，则需要`for`，使用如下方案kv对应，配置数组中元素的属性。\n\n```json\n// in schema\n{\n  \"component\": \"select\",\n  \"label\": \"选项\",\n  \"prop\": \"type\",\n  \"options\": {\n    \"type\": \"array\",\n    \"expression\": \"{typeOptions}\",\n    \"for\": [\n      { \"key\": \"label\", \"value\": \"name\", \"default\": \"选项的默认值\" },\n      { \"key\": \"value\", \"value\": \"id\", \"type\": \"number\" },\n      { \"key\": \"width\", \"value\": \"500px\"}\n    ]\n  }\n}\n\n// in state\n{\n  \"typeOptions\": [\n    { \"id\": 1, \"name\": \"新增备注\" },\n    { \"id\": 2, \"name\": \"删除备注\" },\n    { \"id\": 3, \"name\": \"查找备注\" },\n    { \"id\": 4, \"name\": \"修改备注\" }\n  ]\n}\n\n// 相当于\n{\n  \"component\": \"select\",\n  \"label\": \"选项\",\n  \"prop\": \"type\",\n  \"options\": [\n    { \"label\": \"新增备注\", \"value\": 1, \"width\": \"500px\"}\n    { \"label\": \"删除备注\", \"value\": 2, \"width\": \"500px\"}\n    { \"label\": \"查找备注\", \"value\": 3, \"width\": \"500px\"}\n    { \"label\": \"修改备注\", \"value\": 4, \"width\": \"500px\"}\n  ]\n}\n\n```\n"}