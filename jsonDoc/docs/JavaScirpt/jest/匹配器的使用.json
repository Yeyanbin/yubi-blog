{"fileName":"匹配器的使用.md","dirList":["docs","JavaScirpt","jest"],"name":"匹配器的使用","createTime":1679414070419.96,"modifyTime":1679414070901.1965,"data":"# 匹配器\n\n## 使用匹配器\n\n```js\n// 最简单的使用\ntest('two plus two is four', () => {\n  expect(2 + 2).toBe(4);\n});\n```\n\n在上面代码中，`expect(2 + 2)`返回一个\"expectation\"对象。\n`expect方法源码 https://github.com/facebook/jest/blob/main/packages/expect/src/types.ts#L87`\n\n### 检验对象的值\n\ntoBe校验的是完全相当，也就是相当于`===`，如果需要校验对象的值是否相当，应该用`toEqual`，会递归检查对象或数组的每个字段。\n\n```js\ntest('object assignment', () => {\n  const data = {one: 1};\n  data['two'] = 2;\n  expect(data).toEqual({one: 1, two: 2});\n});\n```\n\n### 检验取反\n\n`.not`即可。\n\n```js\ntest('adding positive numbers is not zero', () => {\n  for (let a = 1; a < 10; a++) {\n    for (let b = 1; b < 10; b++) {\n      expect(a + b).not.toBe(0);\n    }\n  }\n});\n```\n\n#### 奇怪的.not\n\n一开始觉得这个not有点奇怪，看了源码才知道，这是一个匹配器。`https://github.com/facebook/jest/blob/main/packages/expect/src/index.ts#L114`\n\n也就是说，执行`expect`方法后，获取到的匹配器是两个。\n\n```js\nconst expectation = expect(1 + 1);\n\n// expectation是匹配器\n// expectation.not也是匹配器\n```\n\n### 检验真与否\n\n- `toBeNull` 只匹配 null\n- `toBeUndefined` 只匹配 undefined\n- `toBeDefined` 是 toBeUndefinedp匹配器的取反\n- `toBeTruthy` 匹配一切if中为true的值，包括 `1, 'a', {}`之类的\n- `toBeFalsy` 匹配一切if中为false的值，包括 `1, 'a', {}`之类的\n\n### 检验数字\n\n- `toBeGreaterThan` >\n- `toBeGreaterThanOrEqual` >=\n- `toBeLessThan` <\n- `toBeLessThanOrEqual` <=\n\n### 检验字符串\n\n`toMatch(regExp)` 用正则表达式来校验字符串\n\n```js\ntest('but there is a \"stop\" in Christoph', () => {\n  expect('Christoph').toMatch(/stop/);\n});\n```\n\n### Arrays和iterables\n\n`toContain` 检验数组或者可迭代对象中是否包含某项\n\n### toThrow抛出\n\n> toThrow抛出只能用于校验函数的情况。\n\n```js\nfunction compileAndroidCode() {\n  throw new Error('you are using the wrong JDK');\n}\n\ntest('compiling android goes as expected', () => {\n  expect(() => compileAndroidCode()).toThrow();\n  expect(() => compileAndroidCode()).toThrow(Error);\n\n  // You can also use the exact error message or a regexp\n  expect(() => compileAndroidCode()).toThrow('you are using the wrong JDK');\n  expect(() => compileAndroidCode()).toThrow(/JDK/);\n});\n```\n"}