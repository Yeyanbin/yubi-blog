{"fileName":"介绍.md","dirList":["docs","Vue相关","状态管理","pinia"],"name":"介绍","createTime":1679414070449.3735,"modifyTime":1679414071190.6633,"data":"\n# 介绍\n\npinia一开始是尤大在设计Composition api的时候，做的一个实验性的玩具。但是他并不要求使用者必须使用Composition Api。而且Vue2和Vue3里都可以使用，大体上是一致的，除了安装和SSR的时候有区别。\n\n## Pinia的优点\n\npinia是vue生态的状态管理工具，单纯的使用`export const state = reactive({})`在服务端渲染里会代理安全问题。\n\n而且使用pinia还会获得以下优势：\n1. Devtool的支持\n2. 更好的热更新\n3. pinia的插件\n4. 为js使用者提供类似ts的类型支持和提示。\n5. 服务端渲染支持\n\n\n- 私以为，在vue2和vue3的api相同也是一个很大的优势，相对于vuex。\n\n## 使用demo\n\n### 1. 创建store\n\n```js\n\n// stores/counter.js\nimport { defineStore } from 'pinia'\n\nexport const useCounterStore = defineStore('counter', {\n  state: () => {\n    return { count: 0 }\n  },\n  // could also be defined as\n  // state: () => ({ count: 0 })\n  actions: {\n    increment() {\n      this.count++\n    },\n  },\n})\n\n// 一种更推荐的体验，使用一个function\nexport const useCounterStore = defineStore('counter', () => {\n  const count = ref(0)\n  function increment() {\n    count.value++\n  }\n\n  return { count, increment }\n})\n```\n\n### 2. 使用该store\n\n```js\nimport { useCounterStore } from '@/stores/counter'\n\nexport default {\n  setup() {\n    const counter = useCounterStore()\n\n    counter.count++\n    // with autocompletion ✨\n    counter.$patch({ count: counter.count + 1 })\n    // or using an action instead\n    counter.increment()\n  },\n}\n```\n\n\n## 对比Vuex\n\npinia最初是为了探索vuex的下一次迭代的样子，结合了vuex5团队的许多想法，但是当pinia逐渐完善，所以尤大他们用pinia代替了vuex5了。\n\n- 与Vuex相对比\n  1. 取消了繁琐且恶心的mutations。\n  2. 不需要自己去写麻烦的类型来支持ts。（感觉这个意思有点奇怪，先mark，以后研究）\n  3. 自动完成功能。取消了魔法字符串这点可太棒了。\n  4. 不需要动态的添加store，我们并不需要担忧他什么时候注册这个store，而放心的随时随地的使用它。（听起来做了自定义babel?先mark。）\n  5. 没有模块之间的树状嵌套了，oh yesh! 支持了store之间的循环嵌套。\n  6. 失去了module，只有store了。听起来pinia可以不是全局的了"}