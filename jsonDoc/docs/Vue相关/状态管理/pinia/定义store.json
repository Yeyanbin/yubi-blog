{"fileName":"定义store.md","dirList":["docs","Vue相关","状态管理","pinia"],"name":"定义store","createTime":1679414070449.568,"modifyTime":1679414071174.8772,"data":"# defineStore做了什么？\n\n```js\nfunction defineStore(\n  idOrOptions: any,\n  setup?: any,\n  setupOptions?: any\n) {\n  // 兼容多种使用方式\n  const isSetupStore = typeof setup === 'function'\n  if (typeof idOrOptions === 'string') {\n    id = idOrOptions\n    // the option store setup will contain the actual options in this case\n    options = isSetupStore ? setupOptions : setup\n  } else {\n    options = idOrOptions\n    id = idOrOptions.id\n  }\n\n  function useStore() { /* 下一节再看 */}\n\n  useStore.$id = id\n\n  return useStore\n}\n```\n\n# useStore做了什么？\n\n```js\nfunction useStore(pinia?: Pinia | null, hot?: StoreGeneric): StoreGeneric {\n  const currentInstance = getCurrentInstance()\n  pinia =\n    // 在测试模式, 忽略这个参数 ignore the argument provided as we can always retrieve a\n    // pinia实例 通过 getActivePinia() 获取\n    (__TEST__ && activePinia && activePinia._testing ? null : pinia) ||\n    (currentInstance && inject(piniaSymbol))\n  if (pinia) setActivePinia(pinia)\n\n  if (__DEV__ && !activePinia) {\n    throw new Error(\n      `[🍍]: getActivePinia was called with no active Pinia. Did you forget to install pinia?\\n` +\n        `\\tconst pinia = createPinia()\\n` +\n        `\\tapp.use(pinia)\\n` +\n        `This will fail in production.`\n    )\n  }\n\n  pinia = activePinia!\n\n  if (!pinia._s.has(id)) {\n    // 创造store，通过两种不同的用法\n    if (isSetupStore) {\n      createSetupStore(id, setup, options, pinia)\n    } else {\n      createOptionsStore(id, options as any, pinia)\n    }\n\n    /* istanbul ignore else */\n    if (__DEV__) {\n      // @ts-expect-error: not the right inferred type\n      useStore._pinia = pinia\n    }\n  }\n\n  const store: StoreGeneric = pinia._s.get(id)!\n\n  if (__DEV__ && hot) {\n    const hotId = '__hot:' + id\n    const newStore = isSetupStore\n      ? createSetupStore(hotId, setup, options, pinia, true)\n      : createOptionsStore(hotId, assign({}, options) as any, pinia, true)\n\n    hot._hotUpdate(newStore)\n\n    // cleanup the state properties and the store from the cache\n    delete pinia.state.value[hotId]\n    pinia._s.delete(hotId)\n  }\n\n  // save stores in instances to access them devtools\n  if (\n    __DEV__ &&\n    IS_CLIENT &&\n    currentInstance &&\n    currentInstance.proxy &&\n    // avoid adding stores that are just built for hot module replacement\n    !hot\n  ) {\n    const vm = currentInstance.proxy\n    const cache = '_pStores' in vm ? vm._pStores! : (vm._pStores = {})\n    cache[id] = store\n  }\n\n  // StoreGeneric cannot be casted towards Store\n  return store as any\n}\n\n```"}