{"fileName":"2.渲染和模板.md","dirList":["docs","微信相关","小程序"],"name":"2.渲染和模板","createTime":1684335472009.017,"modifyTime":1684426674534.069,"data":"\n# WXML\n\nWXML（WeiXin Markup Language）是框架设计的一套标签语言，结合基础组件、事件系统，可以构建出页面的结构。\n\n## 渲染\n\n简单数据绑定\n\n```js\n// page.wxml\n<view> {{message}} </view>\n\n\n// page.js\nPage({\n  data: {\n    message: 'Hello MINA!'\n  }\n});\n```\n\n# 列表渲染 wx:for\n\n在组件上使用 `wx:for` 控制属性绑定一个数组，即可使用数组中各项的数据重复渲染该组件。\n默认数组的当前项的下标变量名默认为 `index`，数组当前项的变量名默认为 `item`\n\n```js\n<view wx:for=\"{{array}}\">\n  {{index}}: {{item.message}}\n</view>\n\nPage({\n  data: {\n    array: [{\n      message: 'foo',\n    }, {\n      message: 'bar'\n    }]\n  }\n})\n```\n\n使用 wx:for-item 可以指定数组当前元素的变量名，\n使用 wx:for-index 可以指定数组当前下标的变量名.\n\n\n```js\n<view wx:for=\"{{array}}\" wx:for-index=\"idx\" wx:for-item=\"itemName\">\n  {{idx}}: {{itemName.message}}\n</view>\n```\n\n有一点很有意思，在微信小程序中，标签是没有作用域的。每个标签都是在全局范围内定义的，可以在整个页面中访问和使用。\n\n但是，`wx:for`指令是具有作用域的。当您在小程序中使用wx:for指令时，它会创建一个循环作用域，该作用域仅在`wx:for`指令所在的标签内部生效。他是特殊的，小程序中的其他标签并没有单独的作用域。\n\n```js\n<switch wx:for=\"{{objectArray}}\" wx:key=\"unique\" style=\"display: block;\"> {{item.id}} </switch>\n<switch wx:for=\"{{numberArray}}\" wx:key=\"*this\" style=\"display: block;\"> {{item}} </switch>\n\n\nPage({\n  data: {\n    objectArray: [\n      {id: 5, unique: 'unique_5'},\n      {id: 4, unique: 'unique_4'},\n      {id: 3, unique: 'unique_3'},\n      {id: 2, unique: 'unique_2'},\n      {id: 1, unique: 'unique_1'},\n      {id: 0, unique: 'unique_0'},\n    ],\n    numberArray: [1, 2, 3, 4]\n  },\n})\n```\n\n## 条件渲染 wx:if\n\n使用 `wx:if=\"\"` 来判断是否需要渲染该代码块：\n\n```js\n<view wx:if=\"{{condition}}\"> True </view>\n\n\n```\n\n也可以用 wx:elif 和 wx:else 来添加一个 else 块：\n```js\n\n<view wx:if=\"{{length > 5}}\"> 1 </view>\n<view wx:elif=\"{{length > 2}}\"> 2 </view>\n<view wx:else> 3 </view>\n```\n\n# 模板 template\n\n> 这个有点像早期web端的模板引擎的用法，实际使用下来感觉是一个粗糙的组件化方案。还是少用为妙。\n\n微信小程序中的template是一种可复用的组件或代码片段，它可以在不同的页面或组件中被引用和重复使用。\n\n以下是使用模板的基本步骤：\n\n1. 创建一个`template`标签，并给它一个唯一的`name`属性。\n    ```js\n    <template name=\"myTemplate\">\n      <view>\n        <!-- 模板内容 -->\n      </view>\n    </template>\n    ```\n2. 在需要使用该模板的页面或组件中，使用`import`关键字引入模板。\n    ```js\n    <!-- 引入模板 -->\n    <import src=\"path/to/template.wxml\" />\n\n    <!-- 使用模板 -->\n    <template is=\"myTemplate\" data=\"{{...}}\" />\n    ```\n3. 在模板的使用中，通过`is`属性指定要使用的模板名称，并可以通过`data`属性传递数据给模板。\n    ```js\n    <template name=\"myTemplate\">\n      <view>\n        <text>{{title}}</text>\n        <image src=\"{{imageUrl}}\" />\n      </view>\n    </template>\n\n    <!-- 使用模板并传递数据 -->\n    <template is=\"myTemplate\" data=\"{{title: 'Hello', imageUrl: 'path/to/image.jpg'}}\" />\n    ```\n\n"}